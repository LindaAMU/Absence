@page "/Login"
@using Abence.WEB.Services.AuthServices
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject IAuthenticationService AuthenticationService

<div class="w-full max-w-md mx-auto bg-white p-6 rounded-xl shadow-md">
    <EditForm Model="model" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-red-600 text-sm mb-4" />

        <div class="space-y-4">
            <div>
                <div class="flex items-center space-x-4">
                    <label for="email" class="block text-sm font-medium text-gray-700 mb-1">
                        Email
                    </label>
                </div>
                <InputText id="email"
                            @bind-Value="model.Email"
                            class="w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:outline-none focus:ring-2 focus:ring-sky-500 focus:border-sky-500 text-sm" />
                <ValidationMessage For="@(() => model.Email)" class="text-red-600 text-sm mt-1" />
            </div>

            <div>
                <div class="flex items-center space-x-4">
                    <label for="password" class="block text-sm font-medium text-gray-700 mb-1">
                        Password
                    </label>
                </div>
                <InputText id="password" type="password"
                            @bind-Value="model.Password"
                            class="w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:outline-none focus:ring-2 focus:ring-sky-500 focus:border-sky-500 text-sm" />
                <ValidationMessage For="@(() => model.Password)" class="text-red-600 text-sm mt-1" />
            </div>

            <button type="submit"
                    class="w-full mt-6 bg-sky-600 text-white py-2 px-4 rounded-md hover:bg-sky-700 transition-colors font-semibold">
                Login
            </button>
        </div>
    </EditForm>
</div>

@code {
    private LoginFormModel model = new();
    private bool redirected = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !redirected)
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                redirected = true;
                Navigation.NavigateTo("/Home", true);
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await AuthenticationService.Login(model);
            Navigation.NavigateTo("/Home", true);
        }
        catch (Exception ex)
        {
        }
    }
}