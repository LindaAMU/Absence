@using System.ComponentModel.DataAnnotations
@using Abence.WEB.Models.AbsenceModels
@using Abence.WEB.Utils

@if (Visible)
{
    <div class="fixed inset-0 bg-slate-800/40 flex items-center justify-center z-50">
        <div class="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
            <h2 class="text-xl font-semibold mb-4">Nueva Solicitud de Ausencia</h2>

            <EditForm Model="_form" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-4">
                    <label class="block mb-1 font-medium">Tipo de ausencia</label>
                    <InputSelect class="w-full border border-gray-300 px-3 py-2 rounded" @bind-Value="_form.Type">
                        @foreach (Constants.AbsenceType type in Enum.GetValues(typeof(Constants.AbsenceType)))
                        {
                            <option value="@type">@type</option>
                        }
                    </InputSelect>
                </div>

                <div class="mb-4">
                    <label class="block mb-1 font-medium">Fecha de inicio</label>
                    <InputDate class="w-full border border-gray-300 px-3 py-2 rounded" 
                        @bind-Value="_form.StartDate" min="@DateTime.Today.ToString("yyyy-MM-dd")" />
                </div>

                <div class="mb-4">
                    <label class="block mb-1 font-medium">Fecha de finalización</label>
                    <InputDate class="w-full border border-gray-300 px-3 py-2 rounded"
                              @bind-Value="_form.EndDate" min="@DateTime.Today.ToString("yyyy-MM-dd")" />
                </div>

                <div class="flex justify-end space-x-2">
                    <button type="button" class="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400" @onclick="OnClose">Cancelar</button>
                    <button type="submit" class="px-4 py-2 bg-sky-600 text-white rounded hover:bg-sky-700">Guardar</button>
                </div>
            </EditForm>
            @if (!string.IsNullOrEmpty(BackendError))
            {
                <div class="text-red-600 font-semibold text-sm mt-2">
                    @_internalBackendError
                </div>
            }
            @if (!string.IsNullOrEmpty(_dateError))
            {
                <div class="text-red-600 font-semibold text-sm mt-2">
                    @_dateError
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<AbsenceLightModel> OnSubmit { get; set; }
    [Parameter] public string? BackendError { get; set; }
    private string? _internalBackendError;

    private AbsenceLightModel _form = new();

    private string? _dateError;

    protected override void OnParametersSet()
    {
        if (Visible)
        {
            _form = new AbsenceLightModel
            {
                StartDate = DateTime.Today,
                EndDate = DateTime.Today.AddDays(1)
            };
        }
        _internalBackendError = BackendError;
        StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        _dateError = null;

        if (_form.StartDate > _form.EndDate)
        {
            _dateError = "La fecha de inicio no puede ser posterior a la fecha de finalización.";
            return;
        }

        await OnSubmit.InvokeAsync(_form);
        _form = new AbsenceLightModel
        {
            StartDate = DateTime.Today,
            EndDate = DateTime.Today.AddDays(1)
        };
    }
}


